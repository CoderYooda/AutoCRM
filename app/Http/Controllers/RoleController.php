<?phpnamespace App\Http\Controllers;use App\Models\User;use Illuminate\Http\Request;use Illuminate\Support\Facades\Auth;use Spatie\Permission\Models\Role;use Illuminate\Support\Facades\Validator;use App\Http\Controllers\PermissionController;class RoleController extends Controller{	public static function getRoles($request)	{		$roles = Role::where('company_id', Auth::user()->company->id)->get();				return $roles;	}		public function store(Request $request)	{		$validation = Validator::make($request->all(), self::validateRules());				if ($validation->fails()) {			$this->status = 422;			if ($request->expectsJson()) {				return response()->json(['messages' => $validation->errors()], $this->status);			}		}		$ids = [];		if(isset($request['perms'] )){			foreach($request['perms'] as $id => $perm){				$ids[] = $id;			}		}		$role = Role::firstOrNew(['id' => $request['id']]);		$this->status = 200;		if($role->exists){			$this->message = 'Роль обновлена';		} else {			$this->message = 'Роль создана';		}		$role->company_id = Auth::user()->company->id;		$role->name = $request['name'];		$role->save();		$role->syncPermissions($ids);				if($request->expectsJson()){			return response()->json([				'message' => $this->message,				'event' => 'RoleStored',			], $this->status);		} else {			return redirect()->back();		}	}		public function assignRoleToUser(Request $request)	{		$user = User::owned()->where('id', $request['user_id'])->first();		$role = Role::where('company_id', Auth::user()->company()->first()->id)->where('id', $request['role_id'])->first();				$user->syncRoles([$role->id]);				if($request->expectsJson()){			return response()->json([				'message' => 'Роль назначена пользователю',				'event' => 'RoleAssigned',			], 200);		} else {			return redirect()->back();		}	}		private static function validateRules()	{		$rules = [			'name' => ['required', 'min:4', 'string', 'max:255'],		];				return $rules;	}		public static function roleDialog($request)	{		$tag = 'roleDialog';		if ($request['role_id']) {			$tag .= $request['role_id'];			$role = Role::where('id', (int)$request['role_id'])->first();		} else {			$role = NULL;		}				$permissions = PermissionController::getPermissionArray($role);				return response()->json([			'tag' => $tag,			'html' => view(env('DEFAULT_THEME', 'classic') . '.role.dialog.form_role', compact('request', 'role', 'permissions'))->render()		]);	}}